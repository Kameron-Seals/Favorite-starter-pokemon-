<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Survey Results</title>
    <!-- Link to external CSS for page styling -->
    <link rel="stylesheet" href="/style.css">
    <!-- Include Chart.js library for creating pie charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>Survey Results</h1>
    <!-- Chart container for the "Favorite Pokémon" chart -->
    <div class="chart-container">
        <h2>Favorite Pokémon</h2>
        <canvas id="favoriteChart"></canvas> <!-- Canvas for the chart -->
        <div id="favoriteLegend" class="chart-legend"></div> <!-- Custom legend -->
    </div>

    <!-- Chart container for the "Least Favorite Pokémon" chart -->
    <div class="chart-container">
        <h2>Least Favorite Pokémon</h2>
        <canvas id="leastFavoriteChart"></canvas> <!-- Canvas for the chart -->
        <div id="leastFavoriteLegend" class="chart-legend"></div> <!-- Custom legend -->
    </div>

    <h2>Top Favorite Pokémon</h2>
    <div class="top-pokemon-container">
        <% 
        // Filter valid Pokémon with votes and sort by descending vote count
        const validFavorites = Object.entries(favoriteCounts).filter(([key, value]) => key && value > 0);
        const sortedFavorites = validFavorites.sort((a, b) => b[1] - a[1] || a[0].localeCompare(b[0]));

        // Extract top 3 Pokémon, allowing ties in vote count
        const top3Favorites = [];
        let lastVoteCount = null;
        for (let i = 0; i < sortedFavorites.length; i++) {
            if (top3Favorites.length < 3) {
                top3Favorites.push(sortedFavorites[i]);
                lastVoteCount = sortedFavorites[i][1];
            } else if (sortedFavorites[i][1] === lastVoteCount) {
                top3Favorites.push(sortedFavorites[i]);
            } else {
                break;
            }
        }
        %>

        <% top3Favorites.forEach(([pokemon, count]) => { 
            // Match Pokémon name to its type
            const pokemonType = allPokemon.find(p => p.name === pokemon)?.type.toLowerCase() || 'normal';
        %>
        <!-- Display top Pokémon with corresponding sprite and vote count -->
        <div class="top-pokemon <%= pokemonType %>">
            <img src="/sprites/<%= pokemon %>.png" alt="<%= pokemon %>">
            <p><%= pokemon %>: <%= count %> votes</p>
        </div>
        <% }) %>
    </div>

    <h2>Top Least Favorite Pokémon</h2>
    <div class="top-pokemon-container">
        <% 
        // Similar logic for calculating top least favorite Pokémon
        const validLeastFavorites = Object.entries(leastFavoriteCounts).filter(([key, value]) => key && value > 0);
        const sortedLeastFavorites = validLeastFavorites.sort((a, b) => b[1] - a[1] || a[0].localeCompare(b[0]));
        const top3LeastFavorites = [];
        let lastLeastVoteCount = null;

        for (let i = 0; i < sortedLeastFavorites.length; i++) {
            if (top3LeastFavorites.length < 3) {
                top3LeastFavorites.push(sortedLeastFavorites[i]);
                lastLeastVoteCount = sortedLeastFavorites[i][1];
            } else if (sortedLeastFavorites[i][1] === lastLeastVoteCount) {
                top3LeastFavorites.push(sortedLeastFavorites[i]);
            } else {
                break;
            }
        }
        %>

        <% top3LeastFavorites.forEach(([pokemon, count]) => { 
            // Match Pokémon name to its type
            const pokemonType = allPokemon.find(p => p.name === pokemon)?.type.toLowerCase() || 'normal';
        %>
        <!-- Display top least favorite Pokémon -->
        <div class="top-pokemon <%= pokemonType %>">
            <img src="/sprites/<%= pokemon %>.png" alt="<%= pokemon %>">
            <p><%= pokemon %>: <%= count %> votes</p>
        </div>
        <% }) %>
    </div>

    <script>
        // All Pokémon options with types
        const allPokemon = [
            { name: "Bulbasaur", type: "Grass" }, 
            { name: "Charmander", type: "Fire" }, 
            { name: "Squirtle", type: "Water" }, 
            { name: "Chikorita", type: "Grass" }, 
            { name: "Cyndaquil", type: "Fire" }, 
            { name: "Totodile", type: "Water" },
            { name: "Treecko", type: "Grass" }, 
            { name: "Torchic", type: "Fire" }, 
            { name: "Mudkip", type: "Water" }, 
            { name: "Turtwig", type: "Grass" }, 
            { name: "Chimchar", type: "Fire" }, 
            { name: "Piplup", type: "Water" },
            { name: "Snivy", type: "Grass" }, 
            { name: "Tepig", type: "Fire" }, 
            { name: "Oshawott", type: "Water" },
            { name: "Chespin", type: "Grass" }, 
            { name: "Fennekin", type: "Fire" }, 
            { name: "Froakie", type: "Water" },
            { name: "Grookey", type: "Grass" }, 
            { name: "Scorbunny", type: "Fire" }, 
            { name: "Sobble", type: "Water" },
            { name: "Rowlet", type: "Grass" }, 
            { name: "Litten", type: "Fire" }, 
            { name: "Popplio", type: "Water" },
            { name: "Sprigatito", type: "Grass" }, 
            { name: "Fuecoco", type: "Fire" }, 
            { name: "Quaxly", type: "Water" },
            { name: "Pikachu", type: "Electric" },
            { name: "Eevee", type: "Normal" }
        ];

        // Data for favorite and least favorite Pokémon from the server
        const favoriteCounts = <%- JSON.stringify(favoriteCounts) %>;
        const leastFavoriteCounts = <%- JSON.stringify(leastFavoriteCounts) %>;

        // Group Pokémon by type for organizing the legend
        const groupedByType = {
            Fire: [],
            Grass: [],
            Water: [],
            Pikachu: [], // Special handling for Pikachu
            Eevee: []   // Special handling for Eevee
        };

        // Populate groups by type
        allPokemon.forEach(pokemon => {
            if (pokemon.type === "Electric") {
                groupedByType.Pikachu.push(pokemon.name);
            } else if (pokemon.type === "Normal") {
                groupedByType.Eevee.push(pokemon.name);
            } else {
                groupedByType[pokemon.type].push(pokemon.name);
            }
        });

        // Create chart data structure for Chart.js
        const completeChartData = (counts) => {
            const data = {};
            allPokemon.forEach(pokemon => {
                // Assign vote count or default to 0
                data[pokemon.name] = counts[pokemon.name] || 0;
            });
            return {
                labels: Object.keys(data), // Pokémon names
                datasets: [{
                    data: Object.values(data), // Corresponding vote counts
                    backgroundColor: generateColors(), // Background colors
                    hoverBackgroundColor: generateColors() // Hover colors
                }]
            };
        };

        // Generate color mapping for Pokémon types
        function generateColors() {
            const colors = {
                Fire: '#FF6347', 
                Water: '#1E90FF', 
                Grass: '#32CD32', 
                Electric: '#FFD700', 
                Normal: '#D2B48C'
            };

            return allPokemon.map(pokemon => {
                if (pokemon.type === "Fire") return colors.Fire;
                if (pokemon.type === "Water") return colors.Water;
                if (pokemon.type === "Grass") return colors.Grass;
                if (pokemon.name === "Pikachu") return colors.Electric;
                if (pokemon.name === "Eevee") return colors.Normal;
                return '#808080'; // Default gray for unknown types
            });
        }

        // Render a pie chart and create a custom legend
        const renderChart = (ctx, counts, legendId) => {
            const chartData = completeChartData(counts);
            const chart = new Chart(ctx, {
                type: 'pie', // Use pie chart type
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false // Hide default legend
                        }
                    }
                }
            });

            // Create a custom legend by type
            const legendContainer = document.getElementById(legendId);
            Object.keys(groupedByType).forEach(type => {
                const groupDiv = document.createElement('div');
                groupDiv.classList.add('legend-group');
                groupDiv.innerHTML = `<strong>${type}</strong>`;
                groupedByType[type].forEach(pokemon => {
                    const legendItem = document.createElement('div');
                    legendItem.classList.add('legend-item');
                    const index = chartData.labels.indexOf(pokemon);
                    const color = chartData.datasets[0].backgroundColor[index];
                    legendItem.innerHTML = `
                        <span style="background-color: ${color}"></span>
                        ${pokemon}: ${chartData.datasets[0].data[index]}
                    `;
                    groupDiv.appendChild(legendItem);
                });
                legendContainer.appendChild(groupDiv);
            });
        };

        // Render Favorite Pokémon Chart
        renderChart(
            document.getElementById('favoriteChart').getContext('2d'),
            favoriteCounts,
            'favoriteLegend'
        );

        // Render Least Favorite Pokémon Chart
        renderChart(
            document.getElementById('leastFavoriteChart').getContext('2d'),
            leastFavoriteCounts,
            'leastFavoriteLegend'
        );
    </script>
</body>
</html>
